{"version":3,"sources":["components/MonacoWindow.js","components/Header.js","components/KeyExplore.js","data/default_settings.js","App.js","index.js"],"names":["EditorContainer","props","id","style","ErrorContainer","errors","length","background","width","paddingLeft","map","error","MonacoWindow","state","prevHeight","updateEditorHeight","editorElement","editor","getDomNode","lineHeight","getOption","monaco","EditorOption","lineCount","getModel","getLineCount","height","getTopForLineNumber","layout","url","fetch","then","res","json","data","my_schema","text_value","editor_contents_string","modelUri","Uri","parse","model","createModel","languages","jsonDefaults","setDiagnosticsOptions","validate","schemas","uri","fileMatch","toString","schema","create","document","getElementById","value","automaticLayout","language","wordWrap","scrollbar","vertical","handleMouseWheel","scrollBeyondLastLine","minimap","enabled","theme","insertSpaces","onDidChangeModelDecorations","owner","getModeId","markers","getModelMarkers","forEach","d","mes","message","line","startLineNumber","push","setState","prevProps","option_selection","this","setValue","className","React","Component","Header","KeyExplore","selected_option","handleChange","selectedOption","keys","Object","properties","options1","filter","k","label","is_comparison_col","options2","comparisons","items","concat","op","comparison_columns","ss","settings_key","parts","enums","join","quote","code_example","options","schemaToOptions","md","schemaSection","optionToSchemaSection","markdownFromSchemaSection","onChange","source","link_type","probability_two_random_records_match","blocking_rules_to_generate_predictions","output_column_name","comparison_levels","sql_condition","label_for_charts","is_null_level","tf_adjustment_column","tf_minimum_u_value","tf_adjustment_weight","additional_columns_to_retain","stAnnesTheme","typography","Typography","injectStyles","injectFonts","App","event","settings_id","bind","settings_dict","all_example_settings","JSON","stringify","editor_text","getText","ReactDOM","render"],"mappings":"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","file":"static/js/main.e82eccbd.chunk.js","sourcesContent":["import React from \"react\";\nimport * as monaco from \"monaco-editor\";\n\nconst EditorContainer = (props) => {\n  return <div id=\"editor-container\" style={{}}></div>;\n};\n\nconst ErrorContainer = (props) => {\n  if (props.errors.length === 0) {\n    return (\n      <div\n        style={{ background: \"#bcfbb8\", width: \"700px\", paddingLeft: \"10px\" }}\n      >\n        The above settings object is VALID\n      </div>\n    );\n  } else {\n    return (\n      <div\n        style={{ background: \"#fbb8b8\", width: \"700px\", paddingLeft: \"10px\" }}\n      >\n        The above settings object contains the following errors:\n        {props.errors.map((error) => (\n          <li>{error}</li>\n        ))}\n      </div>\n    );\n  }\n};\n\nclass MonacoWindow extends React.Component {\n  state = {\n    errors: [],\n  };\n\n  componentDidMount() {\n    let url =\n      \"https://raw.githubusercontent.com/moj-analytical-services/splink/master/splink/files/settings_jsonschema.json\";\n\n    let p1 = fetch(url).then((res) => res.json());\n\n    p1.then((data) => {\n      let my_schema = data;\n      let text_value = this.props.editor_contents_string;\n\n      this.monaco = monaco;\n\n      var modelUri = this.monaco.Uri.parse(\"a://b/foo.json\"); // a made up unique URI for our model\n      var model = this.monaco.editor.createModel(text_value, \"json\", modelUri);\n\n      this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        validate: true,\n        schemas: [\n          {\n            uri: url, // id of the first schema\n            fileMatch: [modelUri.toString()], // associate with our model\n            schema: my_schema,\n          },\n        ],\n      });\n\n      this.editor = this.monaco.editor.create(\n        document.getElementById(\"editor-container\"),\n        {\n          value: text_value,\n          automaticLayout: false,\n          language: \"json\",\n          model: model,\n          wordWrap: \"on\",\n          scrollbar: {\n            vertical: \"hidden\",\n            handleMouseWheel: false,\n          },\n          scrollBeyondLastLine: false,\n          minimap: {\n            enabled: false,\n          },\n          theme: \"vs-dark\",\n          insertSpaces: true,\n        }\n      );\n\n      this.model = model;\n\n      this.editor.onDidChangeModelDecorations(() => {\n        const model = this.editor.getModel();\n        this.updateEditorHeight();\n\n        const owner = model.getModeId();\n        const markers = monaco.editor.getModelMarkers({ owner });\n\n        let errors = [];\n        markers.forEach((d) => {\n          let mes = d.message;\n          let line = d.startLineNumber;\n          mes = `Error: ${mes} at line ${line}`;\n          errors.push(mes);\n        });\n\n        this.setState({ errors: errors });\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.option_selection !== this.props.option_selection) {\n      this.editor.setValue(this.props.editor_contents_string);\n    }\n  }\n\n  prevHeight = 0;\n\n  updateEditorHeight = () => {\n    const editorElement = this.editor.getDomNode();\n\n    if (!editorElement) {\n      return;\n    }\n\n    const lineHeight = this.editor.getOption(\n      monaco.editor.EditorOption.lineHeight\n    );\n    const lineCount = this.editor.getModel()?.getLineCount() || 1;\n    const height = this.editor.getTopForLineNumber(lineCount + 1) + lineHeight;\n\n    if (this.prevHeight !== height) {\n      this.prevHeight = height;\n      editorElement.style.height = `${height}px`;\n      this.editor.layout();\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <ul>\n          <li> Hover over fields to get a description of their purpose </li>\n          <li> ctrl+space to autocomplete fields </li>\n          <li> ctrl+shift+f to format the document </li>\n        </ul>\n\n        <EditorContainer className=\"monaco-window\" />\n        <ErrorContainer errors={this.state.errors} />\n      </div>\n    );\n  }\n}\n\nexport default MonacoWindow;\n","import React from \"react\";\n\nfunction Header(props) {\n  return (\n    <div>\n      <h1>Splink settings editor with autocomplete and validation</h1>\n      <p>\n        Use the code editor below to author a <code>splink</code> settings\n        dictionary.\n      </p>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport Select from \"react-select\";\n\nimport ReactMarkdown from \"react-markdown\";\n\nclass KeyExplore extends React.Component {\n  state = {\n    schema: null,\n    selected_option: null,\n  };\n\n  componentDidMount() {\n    let url =\n      \"https://raw.githubusercontent.com/moj-analytical-services/splink/master/splink/files/settings_jsonschema.json\";\n\n    let p1 = fetch(url).then((res) => res.json());\n\n    p1.then((data) => {\n      this.schema = data;\n      this.setState({ selected_option: null });\n    });\n  }\n\n  handleChange = (selectedOption) => {\n    let schema = this.state.schema;\n\n    this.setState({\n      schema: schema,\n      selected_option: selectedOption,\n    });\n  };\n\n  schemaToOptions() {\n    if (!this.schema) {\n      return [];\n    }\n    let keys = Object.keys(this.schema.properties);\n    keys = keys.filter((k) => k !== \"$schema\");\n    keys = keys.filter((k) => k !== \"$id\");\n    let options1 = keys.map((k) => {\n      return { label: k, value: k, is_comparison_col: false };\n    });\n\n    keys = Object.keys(this.schema.properties.comparisons.items.properties);\n    keys = keys.filter((k) => k !== \"$schema\");\n    keys = keys.filter((k) => k !== \"$id\");\n    let options2 = keys.map((k) => {\n      return { label: k, value: k, is_comparison_col: true };\n    });\n\n    return options1.concat(options2);\n  }\n\n  optionToSchemaSection() {\n    if (!this.schema) {\n      return {};\n    }\n\n    let op = this.state.selected_option;\n    if (op.is_comparison_col) {\n      return this.schema.properties.comparison_columns.items.properties[\n        op.value\n      ];\n    } else {\n      return this.schema.properties[op.value];\n    }\n  }\n\n  markdownFromSchemaSection(ss) {\n    let is_comparison_col = this.state.selected_option.is_comparison_col;\n    let settings_key = this.state.selected_option.value;\n\n    let parts = [];\n    if (\"title\" in ss) {\n      parts.push(`**Summary**: ${ss[\"title\"]}`);\n    }\n    if (\"description\" in ss) {\n      parts.push(`**Description**: ${ss[\"description\"]}`);\n    }\n\n    if (\"default\" in ss) {\n      parts.push(`**Default value if not provided**: ${ss[\"default\"]}`);\n    }\n\n    if (\"type\" in ss) {\n      parts.push(`**Data type**: ${ss[\"type\"]}`);\n    }\n\n    if (\"enum\" in ss) {\n      let enums = ss[\"enum\"].join(\", \");\n      parts.push(`**Takes one of the following values**: ${enums}`);\n    }\n\n    if (\"examples\" in ss) {\n      let quote = \"\";\n      if (ss[\"type\"] === \"string\") {\n        quote = '\"';\n      }\n\n      let code_example = [];\n      if (is_comparison_col) {\n        code_example.push(`settings = {`);\n        code_example.push(`    \"comparison_columns\": [`);\n        code_example.push(`        {`);\n        code_example.push(\n          `    \"${settings_key}\": ${quote}${ss[\"examples\"][0]}${quote}`\n        );\n        code_example.push(`        }`);\n        code_example.push(`    ]`);\n        code_example.push(`}`);\n        code_example = code_example.join(\"\\n\");\n      } else {\n        code_example.push(`settings = {`);\n        code_example.push(\n          `    \"${settings_key}\": ${quote}${ss[\"examples\"][0]}${quote}`\n        );\n        code_example.push(`}`);\n        code_example = code_example.join(\"\\n\");\n      }\n\n      parts.push(`**Example**: \\n  \\`\\`\\`\\` \\n ${code_example}  \\n \\`\\`\\`\\` `);\n    }\n\n    return parts.join(\"\\n\\n\");\n  }\n\n  render() {\n    let options = this.schemaToOptions();\n    let md = \"\";\n    if (this.state.selected_option) {\n      let schemaSection = this.optionToSchemaSection();\n      md = this.markdownFromSchemaSection(schemaSection);\n    }\n\n    return (\n      <div>\n        <h2>Setting dictionary key explorer</h2>\n        <p>\n          Select a key from the box below for further details about what it does\n        </p>\n        <Select\n          options={options}\n          value={this.state.selected_option}\n          onChange={this.handleChange}\n        />\n        <br />\n        <ReactMarkdown source={md} />\n      </div>\n    );\n  }\n}\n\nexport default KeyExplore;\n","export default {\n  link_type: \"dedupe_only\",\n  probability_two_random_records_match: 0.0001,\n  blocking_rules_to_generate_predictions: [\n    \"l.first_name = r.first_name\",\n    \"l.surname = r.surname\",\n  ],\n  comparisons: [\n    {\n      output_column_name: \"First name\",\n      comparison_levels: [\n        {\n          sql_condition: \"first_name_l IS NULL OR first_name_r IS NULL\",\n          label_for_charts: \"Null\",\n          is_null_level: true,\n        },\n        {\n          sql_condition: \"first_name_l = first_name_r\",\n          label_for_charts: \"Exact match\",\n          tf_adjustment_column: \"first_name\",\n          tf_minimum_u_value: 0.001,\n        },\n        {\n          sql_condition: \"levenshtein(first_name_l, first_name_r) <= 2\",\n          label_for_charts: \"Levenstein <= 2\",\n          tf_adjustment_column: \"first_name\",\n          tf_minimum_u_value: 0.003,\n          tf_adjustment_weight: 0.5,\n        },\n        {\n          sql_condition: \"ELSE\",\n          label_for_charts: \"All other comparisons\",\n        },\n      ],\n    },\n    {\n      output_column_name: \"Surname\",\n    },\n    {\n      output_column_name: \"Date of birth\",\n    },\n  ],\n  additional_columns_to_retain: [\"cluster\"],\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nimport MonacoWindow from \"./components/MonacoWindow\";\n\nimport Header from \"./components/Header\";\nimport KeyExplore from \"./components/KeyExplore\";\n\nimport all_example_settings from \"./data/default_settings.js\";\n\nimport Typography from \"typography\";\nimport stAnnesTheme from \"typography-theme-st-annes\";\nimport injectFonts from \"typography-inject-fonts\";\n\nconst theme = stAnnesTheme;\nconst typography = new Typography(theme);\ntypography.injectStyles();\ninjectFonts(typography);\n\nclass App extends React.Component {\n  state = {\n    option_selection: \"id_1\",\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  getText(id) {\n    let settings_dict = all_example_settings;\n    let settings_text = JSON.stringify(settings_dict, null, 4);\n    return settings_text;\n  }\n\n  handleChange = (event) => {\n    let settings_id = event.value;\n    this.setState({ option_selection: settings_id });\n  };\n\n  render() {\n    let editor_text = this.getText();\n\n    return (\n      <div className=\"App-main-div\">\n        <Header />\n        <div className=\"App-flex-container\">\n          <div className=\"App-flex-item\">\n            <MonacoWindow editor_contents_string={editor_text} />\n          </div>\n        </div>\n        <KeyExplore />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}